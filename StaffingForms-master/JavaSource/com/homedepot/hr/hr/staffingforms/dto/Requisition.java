package com.homedepot.hr.hr.staffingforms.dto;
/* 
 * This program is proprietary to The Home Depot and is not to be
 * reproduced, used, or disclosed without permission of:
 *    
 *  The Home Depot
 *  2455 Paces Ferry Road, N.W.
 *  Atlanta, GA 30339-4053
 *
 * File Name: Requisition.java
 * Application: RetailStaffing
 */
import java.io.Serializable;
import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Timestamp;

import com.thoughtworks.xstream.annotations.XStreamAlias;

/**
 * This class represents represent the breakdown of interview slots by status for a given day
 * <br>
 * Using the XStream API to marshal this object into an XML will produce the following
 * format:<br>
 * <br>
 * <code>
 * &lt;requisition&gt;<br>
 * &nbsp;&lt;number&gt;&lt;/number&gt;<br>
 * &nbsp;&lt;storeNumber&gt;&lt;/storeNumber&gt;<br>
 * &nbsp;&lt;createTimestamp&gt;&lt;/createTimestamp&gt;<br>
 * &nbsp;&lt;createUserId&gt;&lt;/createUserId&gt;<br>
 * &nbsp;&lt;departmentNumber&gt;&lt;/departmentNumber&gt;<br>
 * &nbsp;&lt;jobTitleCode&gt;&lt;/jobTitleCode&gt;<br>
 * &nbsp;&lt;jobTitleDescription&gt;&lt;/jobTitleDescription&gt;<br>
 * &nbsp;&lt;requiredPositionFillDate&gt;&lt;/requiredPositionFillDate&gt;<br>
 * &nbsp;&lt;authorizedPositionCount&gt;&lt;/authorizedPositionCount&gt;<br>
 * &nbsp;&lt;openPositionCount&gt;&lt;/openPositionCount&gt;<br>
 * &nbsp;&lt;fullTimeRequired&gt;&lt;/fullTimeRequired&gt;<br>
 * &nbsp;&lt;partTimeRequired&gt;&lt;/partTimeRequired&gt;<br>
 * &nbsp;&lt;pmRequired&gt;&lt;/pmRequired&gt;<br>
 * &nbsp;&lt;weekendRequired&gt;&lt;/weekendRequired&gt;<br>
 * &nbsp;&lt;active&gt;&lt;/active&gt;<br>
 * &nbsp;&lt;lastUpdateUserId&gt;&lt;/lastUpdateUserId&gt;<br>
 * &nbsp;&lt;lastUpdateTimestamp&gt;&lt;/lastUpdateTimestamp&gt;<br>
 * &nbsp;&lt;hireManagerName&gt;&lt;/hireManagerName&gt;<br>
 * &nbsp;&lt;hireManagerTitle&gt;&lt;/hireManagerTitle&gt;<br>
 * &nbsp;&lt;hireManagerPhoneNumber&gt;&lt;/hireManagerPhoneNumber&gt;<br>
 * &nbsp;&lt;requestNumber&gt;&lt;/requestNumber&gt;<br>
 * &nbsp;&lt;targetExperienceLevelCode&gt;&lt;/targetExperienceLevelCode&gt;<br>
 * &nbsp;&lt;targetPayAmount&gt;&lt;/targetPayAmount&gt;<br>
 * &nbsp;&lt;hiringEvent&gt;&lt;/hiringEvent&gt;<br>
 * &nbsp;&lt;weekBeginDate&gt;&lt;/weekBeginDate&gt;<br>
 * &nbsp;&lt;hireManagerAvailabilityText&gt;&lt;/hireManagerAvailabilityText&gt;<br>
 * &nbsp;&lt;requisitionStatusCode&gt;&lt;/requisitionStatusCode&gt;<br>
 * &nbsp;&lt;RSCScheduling&gt;&lt;/RSCScheduling&gt;<br>
 * &nbsp;&lt;allowTemporaryApplicant&gt;&lt;/allowTemporaryApplicant&gt;<br>
 * &nbsp;&lt;interviewCandidateCount&gt;&lt;/interviewCandidateCount&gt;<br>
 * &nbsp;&lt;interviewMinutes&gt;&lt;/interviewMinutes&gt;<br>
 * &nbsp;&lt;requisitionCalendarId&gt;&lt;/requisitionCalendarId&gt;<br>
 * &nbsp;&lt;interviewScheduledCount&gt;&lt;/interviewScheduledCount&gt;<br>
 * &nbsp;&lt;interviewCompletedCount&gt;&lt;/interviewCompletedCount&gt;<br>
 * &nbsp;&lt;requisitionCalendar&gt;&lt;/requisitionCalendar&gt;<br>
 * &lt;/requisition&gt;<br>
 * </code>
 * <br>
 * Only non-null member variables will be present in the XML generated by
 * the XStream API.
 */
@XStreamAlias("requisition")
public class Requisition implements Serializable
{
    private static final long serialVersionUID = 8968319013198942181L;
    
    // the requisition number
    @XStreamAlias("number")
	private int mReqnNbr;
	// the store number for this requisition
    @XStreamAlias("storeNumber")
	private String mStrNbr;
	// date/time this requisition was created
    @XStreamAlias("createTimestamp")
	private Timestamp mCrtTs;
	// id of the user that created this requisition
    @XStreamAlias("createUserId")
	private String mCrtUserId;
	// department number for this requisition
    @XStreamAlias("departmentNumber")
	private String mDeptNbr;
	// job title code for this requisition
    @XStreamAlias("jobTitleCode")
	private String mJobTtlCd;
	// job title description for this requisition
    @XStreamAlias("jobTitleDescription")
	private String mJobTtlDesc;
	// date this position needs to be filled by
    @XStreamAlias("requiredPositionFillDate")
	private Date mReqdPosnFillDt;
	// authorized position count
    @XStreamAlias("authorizedPositionCount")
	private short mAuthPosnCnt;
	// open position count
    @XStreamAlias("openPositionCount")
	private short mOpenPosnCnt;
	// full-time position indicator
    @XStreamAlias("fullTimeRequired")
	private boolean mFtmReqd;
	// part-time position indicator
    @XStreamAlias("partTimeRequired")
	private boolean mPtmReqd;
	// PM required indicator
    @XStreamAlias("pmRequired")
	private boolean mPmReqd;
	// weekend required indicator
    @XStreamAlias("weekendRequired")
	private boolean mWkndReqd;
	// active indicator
    @XStreamAlias("active")
	private boolean mActive;
	// id of the last user that updated this requisition
    @XStreamAlias("lastUpdateUserId")
	private String mLastUpdUserId;
	// last date/time this requisition was updated
    @XStreamAlias("lastUpdateTimestamp")
	private Timestamp mLastUpdTs;
	// name of the hiring manager
    @XStreamAlias("hireManagerName")
	private String mHireMgrNm;
    // hiring manager title
    @XStreamAlias("hireManagerTitle")
    private String mHireMgrTtl;
	// hiring manager phone number
    @XStreamAlias("hireManagerPhoneNumber")
	private String mHireMgrPhnNbr;
	// request number
    @XStreamAlias("requestNumber")
	private String mRqstNbr;
	// target experience level code
    @XStreamAlias("targetExperienceLevelCode")
	private Short mTrgtExprLvlCd;
	// target pay amount
    @XStreamAlias("targetPayAmount")
	private BigDecimal mTrgtPayAmt;
	// hiring event indicator
    @XStreamAlias("hiringEvent")
	private boolean mHiringEvnt;
	// week begin date for this requisition
    @XStreamAlias("weekBeginDate")
	private Date mWkBgnDt;
	// hiring manager availability
    @XStreamAlias("hireManagerAvailabilityText")
	private String mHireMgrAvailTxt;
	// requisition status code
    @XStreamAlias("requisitionStatusCode")
	private Short mReqnStatCd;
	// RSC scheduling indicator
    @XStreamAlias("RSCScheduling")
	private boolean mRscSched;
	// temporary applicant indicator
    @XStreamAlias("allowTemporaryApplicant")
	private boolean mAplcntTmp;
	// minimum number of candidates to interview for this requisition
    @XStreamAlias("interviewCandidateCount")
	private Short mIntvwCandCnt;
	// duration in minutes of the interview for this requisition
    @XStreamAlias("interviewMinutes")
	private Short mIntvwMins;
	// the calendar id this requisition is attached to
    @XStreamAlias("requisitionCalendarId")
	private Integer mReqnCalId;
	// number of interviews that have been scheduled for this requisition
    @XStreamAlias("interviewScheduledCount")
	private int mIntvwSchedCnt;
	// number of interviews that have been completed for this requisition
    @XStreamAlias("interviewCompletedCount")
	private int mIntvwCmpltCnt;
    // details for the calendar this requisition is attached to
    @XStreamAlias("requisitionCalendar")
    private RequisitionCalendar mReqnCal;

	/**
	 * @return the requisition number
	 */
	public int getReqnNbr()
	{
		return mReqnNbr;
	} // end function getReqnNbr()
	
	/**
	 * @return the store number for this requisition
	 */
	public String getStrNbr()
	{
		return mStrNbr;
	} // end function getStrNbr()
	
	/**
	 * @return date/time this requisition was created
	 */
	public Timestamp getCrtTs()
	{
		return mCrtTs;
	} // end function getCrtTs()
	
	/**
	 * @return id of the user that created this requisition
	 */
	public String getCrtUserId()
	{
		return mCrtUserId;
	} // end function getCrtUserId()
	
	/**
	 * @return department number for this requisition
	 */
	public String getDeptNbr()
	{
		return mDeptNbr;
	} // end function getDeptNbr()
	
	/**
	 * @return job title code for this requisition
	 */
	public String getJobTtlCd()
	{
		return mJobTtlCd;
	} // end function getJobTtlCd()
		
	/**
	 * @return date this position needs to be filled by
	 */
	public Date getReqdPosnFillDt()
	{
		return mReqdPosnFillDt;
	} // end function getReqdPosnFillDt()

	/**
	 * @return authorized position count
	 */
	public short getAuthPosnCnt()
	{
		return mAuthPosnCnt;
	} // end function getAuthPosnCnt()

	/**
	 * @return open position count
	 */
	public short getOpenPosnCnt()
	{
		return mOpenPosnCnt;
	} // end function getOpenPosnCnt()

	/**
	 * @return full-time position indicator
	 */
	public boolean isFtmReqd()
	{
		return mFtmReqd;
	} // end function isFtmReqd()

	/**
	 * @return part-time position indicator
	 */
	public boolean isPtmReqd()
	{
		return mPtmReqd;
	} // end function isPtmReqd()

	/**
	 * @return PM required indicator
	 */
	public boolean isPmReqd()
	{
		return mPmReqd;
	} // end function isPmReqd()

	/**
	 * @return weekend required indicator
	 */
	public boolean isWkndReqd()
	{
		return mWkndReqd;
	} // end function isWkndReqd()

	/**
	 * @return active indicator
	 */
	public boolean isActive()
	{
		return mActive;
	} // end function isActive()

	/**
	 * @return id of the last user that updated this requisition
	 */
	public String getLastUpdUserId()
	{
		return mLastUpdUserId;
	} // end function getLastUpdUserId()

	/**
	 * @return last date/time this requisition was updated
	 */
	public Timestamp getLastUpdTs()
	{
		return mLastUpdTs;
	} // end function getLastUpdTs()

	/**
	 * @return name of the hiring manager
	 */
	public String getHireMgrNm()
	{
		return mHireMgrNm;
	} // end function getHireMgrNm()

	/**
	 * @return job title description for this requisition
	 */
	public String getJobTtlDesc()
	{
		return mJobTtlDesc;
	} // end function getJobTtlDesc()

	/**
	 * @return hiring manager phone number
	 */
	public String getHireMgrPhnNbr()
	{
		return mHireMgrPhnNbr;
	} // end function getHireMgrPhnNbr()

	/**
	 * @return request number
	 */
	public String getRqstNbr()
	{
		return mRqstNbr;
	} // end function getRqstNbr()

	/**
	 * @return target experience level code
	 */
	public Short getTrgtExprLvlCd()
	{
		return mTrgtExprLvlCd;
	} // end function getTrgtExprLvlCd()

	/**
	 * @return target pay amount
	 */
	public BigDecimal getTrgtPayAmt()
	{
		return mTrgtPayAmt;
	} // end function getTrgtPayAmt()

	/**
	 * @return hiring event indicator
	 */
	public boolean isHiringEvnt()
	{
		return mHiringEvnt;
	} // end function isHiringEvnt()

	/**
	 * @return week begin date for this requisition
	 */
	public Date getWkBgnDt()
	{
		return mWkBgnDt;
	} // end function getWkBgnDt()

	/**
	 * @return hiring manager availability
	 */
	public String getHireMgrAvailTxt()
	{
		return mHireMgrAvailTxt;
	} // end function getHireMgrAvailTxt()

	/**
	 * @return requisition status code
	 */
	public Short getReqnStatCd()
	{
		return mReqnStatCd;
	} // end function getReqnStatCd()

	/**
	 * @return RSC scheduling indicator
	 */
	public boolean isRscSched()
	{
		return mRscSched;
	} // end function isRscSched()

	/**
	 * @return temporary applicant indicator
	 */
	public boolean isAplcntTmp()
	{
		return mAplcntTmp;
	} // end function isAplcntTmp()

	/**
	 * @return minimum number of candidates to interview for this requisition
	 */
	public Short getIntvwCandCnt()
	{
		return mIntvwCandCnt;
	} // end function getIntvwCandCnt()

	/**
	 * @return duration in minutes of the interview for this requisition
	 */
	public Short getIntvwMins()
	{
		return mIntvwMins;
	} // end function getIntvwMins()

	/**
	 * @return the calendar id this requisition is attached to
	 */
	public Integer getReqnCalId()
	{
		return mReqnCalId;
	} // end function getReqnCalId()

	/**
	 * @return number of interviews that have been scheduled for this requisition
	 */
	public int getIntvwSchedCnt()
	{
		return mIntvwSchedCnt;
	} // end function getIntvwSchedCnt()

	/**
	 * @return number of interviews that have been completed for this requisition
	 */
	public int getIntvwCmpltCnt()
	{
		return mIntvwCmpltCnt;
	} // end function getIntvwCmpltCnt()
	
	/**
	 * @return hiring manager title
	 */
	public String getHireMgrTtl()
	{
		return mHireMgrTtl;
	} // end function getHireMgrTtl()
	
	/**
	 * @param reqnNbr the requisition number
	 */
	public void setReqnNbr(int reqnNbr)
	{
		mReqnNbr = reqnNbr;
	} // end function setReqnNbr()

	/**
	 * @param strNbr the store number for this requisition
	 */
	public void setStrNbr(String strNbr)
	{
		mStrNbr = strNbr;
	} // end function setStrNbr()

	/**
	 * @param crtTs date/time this requisition was created
	 */
	public void setCrtTs(Timestamp crtTs)
	{
		mCrtTs = crtTs;
	} // end function setCrtTs()

	/**
	 * @param crtUserId id of the user that created this requisition
	 */
	public void setCrtUserId(String crtUserId)
	{
		mCrtUserId = crtUserId;
	} // end function setCrtUserId()

	/**
	 * @param deptNbr department number for this requisition
	 */
	public void setDeptNbr(String deptNbr)
	{
		mDeptNbr = deptNbr;
	} // end function setDeptNbr()

	/**
	 * @param jobTtlCd job title code for this requisition
	 */
	public void setJobTtlCd(String jobTtlCd)
	{
		mJobTtlCd = jobTtlCd;
	} // end function setJobTtlCd()

	/**
	 * @param reqdPosnFillDt date this position needs to be filled by
	 */
	public void setReqdPosnFillDt(Date reqdPosnFillDt)
	{
		mReqdPosnFillDt = reqdPosnFillDt;
	} // end function setReqdPosnFillDt()

	/**
	 * @param authPosnCnt authorized position count
	 */
	public void setAuthPosnCnt(short authPosnCnt)
	{
		mAuthPosnCnt = authPosnCnt;
	} // end function setAuthPosnCnt()

	/**
	 * @param openPosnCnt open position count
	 */
	public void setOpenPosnCnt(short openPosnCnt)
	{
		mOpenPosnCnt = openPosnCnt;
	} // end function setOpenPosnCnt()

	/**
	 * @param ftmReqd full-time position indicator
	 */
	public void setFtmReqd(boolean ftmReqd)
	{
		mFtmReqd = ftmReqd;
	} // end function setFtmReqd()

	/**
	 * @param ptmReqd part-time position indicator
	 */
	public void setPtmReqd(boolean ptmReqd)
	{
		mPtmReqd = ptmReqd;
	} // end function setPtmReqd()

	/**
	 * @param pmReqd PM required indicator
	 */
	public void setPmReqd(boolean pmReqd)
	{
		mPmReqd = pmReqd;
	} // end function setPmReqd()

	/**
	 * @param wkndReqd weekend required indicator
	 */
	public void setWkndReqd(boolean wkndReqd)
	{
		mWkndReqd = wkndReqd;
	} // end function setWkndReqd()

	/**
	 * @param active active indicator
	 */
	public void setActive(boolean active)
	{
		mActive = active;
	} // end function setActive()

	/**
	 * @param lastUpdUserId id of the last user that updated this requisition
	 */
	public void setLastUpdUserId(String lastUpdUserId)
	{
		mLastUpdUserId = lastUpdUserId;
	} // end function setLastUpdUserId()

	/**
	 * @param lastUpdTs last date/time this requisition was updated
	 */
	public void setLastUpdTs(Timestamp lastUpdTs)
	{
		mLastUpdTs = lastUpdTs;
	} // end function setLastUpdTs()

	/**
	 * @param hireMgrNm name of the hiring manager
	 */
	public void setHireMgrNm(String hireMgrNm)
	{
		mHireMgrNm = hireMgrNm;
	} // end function setHireMgrNm()

	/**
	 * @param jobTtlDesc job title description for this requisition
	 */
	public void setJobTtlDesc(String jobTtlDesc)
	{
		mJobTtlDesc = jobTtlDesc;
	} // end function setJobTtlDesc()

	/**
	 * @param hireMgrPhnNbr hiring manager phone number
	 */
	public void setHireMgrPhnNbr(String hireMgrPhnNbr)
	{
		mHireMgrPhnNbr = hireMgrPhnNbr;
	} // end function setHireMgrPhnNbr()

	/**
	 * @param rqstNbr request number
	 */
	public void setRqstNbr(String rqstNbr)
	{
		mRqstNbr = rqstNbr;
	} // end function setRqstNbr()

	/**
	 * @param trgtExprLvlCd target experience level code
	 */
	public void setTrgtExprLvlCd(Short trgtExprLvlCd)
	{
		mTrgtExprLvlCd = trgtExprLvlCd;
	} // end function setTrgtExprLvlCd()

	/**
	 * @param trgtPayAmt target pay amount
	 */
	public void setTrgtPayAmt(BigDecimal trgtPayAmt)
	{
		mTrgtPayAmt = trgtPayAmt;
	} // end function setTrgtPayAmt()

	/**
	 * @param hiringEvnt hiring event indicator
	 */
	public void setHiringEvnt(boolean hiringEvnt)
	{
		mHiringEvnt = hiringEvnt;
	} // end function setHiringEvnt()

	/**
	 * @param wkBgnDt week begin date for this requisition
	 */
	public void setWkBgnDt(Date wkBgnDt)
	{
		mWkBgnDt = wkBgnDt;
	} // end function setWkBgnDt()

	/**
	 * @param hireMgrAvailTxt hiring manager availability
	 */
	public void setHireMgrAvailTxt(String hireMgrAvailTxt)
	{
		mHireMgrAvailTxt = hireMgrAvailTxt;
	} // end function setHireMgrAvailTxt()

	/**
	 * @param reqnStatCd requisition status code
	 */
	public void setReqnStatCd(Short reqnStatCd)
	{
		mReqnStatCd = reqnStatCd;
	} // end function setReqnStatCd()

	/**
	 * @param rscSched RSC scheduling indicator
	 */
	public void setRscSched(boolean rscSched)
	{
		mRscSched = rscSched;
	} // end function setRscSched()

	/**
	 * @param aplcntTmp temporary applicant indicator
	 */
	public void setAplcntTmp(boolean aplcntTmp)
	{
		mAplcntTmp = aplcntTmp;
	} // end function setAplcntTmp()

	/**
	 * @param intvwCandCnt minimum number of candidates to interview for this requisition
	 */
	public void setIntvwCandCnt(Short intvwCandCnt)
	{
		mIntvwCandCnt = intvwCandCnt;
	} // end function setIntvwCandCnt()

	/**
	 * @param intvwMins duration in minutes of the interview for this requisition
	 */
	public void setIntvwMins(Short intvwMins)
	{
		mIntvwMins = intvwMins;
	} // end function setIntvwMins()

	/**
	 * @param reqnCalId the calendar id this requisition is attached to
	 */
	public void setReqnCalId(Integer reqnCalId)
	{
		mReqnCalId = reqnCalId;
	} // end function setReqnCalId()

	/**
	 * @param intvwSchedCnt number of interviews that have been scheduled for this requisition
	 */
	public void setIntvwSchedCnt(int intvwSchedCnt)
	{
		mIntvwSchedCnt = intvwSchedCnt;
	} // end function setIntvwSchedCnt()

	/**
	 * @param intvwCmpltCnt number of interviews that have been completed for this requisition
	 */
	public void setIntvwCmpltCnt(int intvwCmpltCnt)
	{
		mIntvwCmpltCnt = intvwCmpltCnt;
	} // end function setIntvwCmpltCnt()
	
	/**
	 * @return details for the calendar this requisition is attached to
	 */
	public RequisitionCalendar getReqnCal()
	{
		return mReqnCal;
	} // end function getReqnCal()
	
	/**
	 * @param reqnCal details for the calendar this requisition is attached to
	 */
	public void setReqnCal(RequisitionCalendar reqnCal)
	{
		mReqnCal = reqnCal;
	} // end function setReqnCal()
	
	/**
	 * @param hireMgrTtl hiring manager title
	 */
	public void setHireMgrTtl(String hireMgrTtl)
	{
		mHireMgrTtl = hireMgrTtl;
	} // end function setHireMgrTtl()
} // end class Requisition