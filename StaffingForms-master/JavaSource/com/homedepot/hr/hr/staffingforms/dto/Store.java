package com.homedepot.hr.hr.staffingforms.dto;
/* 
 * This program is proprietary to The Home Depot and is not to be
 * reproduced, used, or disclosed without permission of:
 *    
 *  The Home Depot
 *  2455 Paces Ferry Road, N.W.
 *  Atlanta, GA 30339-4053
 *
 * File Name: Store.java
 * Application: RetailStaffing
 */
import java.io.Serializable;

import com.homedepot.hr.hr.staffingforms.util.DB2Trimmer;
import com.homedepot.ta.aa.dao.builder.DAOConverter;
import com.homedepot.ta.aa.dao.builder.DAOElement;
import com.thoughtworks.xstream.annotations.XStreamAlias;

/**
 * This class represents a store location
 * <br>
 * Using the XStream API to marshal this object into an XML will produce the following
 * format:<br>
 * <br>
 * <code>
 * &lt;store&gt;<br>
 * &nbsp;&lt;number&gt;&lt;/number&gt;<br>
 * &nbsp;&lt;name&gt;&lt;/name&gt;<br>
 * &nbsp;&lt;addressLine1&gt;&lt;/addressLine1&gt;<br>
 * &nbsp;&lt;addressLine2&gt;&lt;/addressLine2&gt;<br>
 * &nbsp;&lt;city&gt;&lt;/city&gt;<br>
 * &nbsp;&lt;state&gt;&lt;/state&gt;<br>
 * &nbsp;&lt;postalCode&gt;&lt;/postalCode&gt;<br>
 * &nbsp;&lt;countryCode&gt;&lt;/countryCode&gt;<br>
 * &nbsp;&lt;phoneNumber&gt;&lt;/phoneNumber&gt;<br>
 * &nbsp;&lt;districtCode&gt;&lt;/districtCode&gt;<br>
 * &nbsp;&lt;regionCode&gt;&lt;/regionCode&gt;<br>
 * &nbsp;&lt;divisionCode&gt;&lt;/divisionCode&gt;<br>
 * &lt;/store&gt;<br>
 * </code>
 * <br>
 * Only non-null member variables will be present in the XML generated by
 * the XStream API.
 */
@XStreamAlias("store")
public class Store implements Serializable
{
    private static final long serialVersionUID = -2143759591854136078L;

    /** store number */
    @DAOElement({"HR_SYS_STR_NBR","number"})
    @DAOConverter(DB2Trimmer.class)
    @XStreamAlias("number")
	private String mNumber;
    
	/** store name */
    @DAOElement({"HR_SYS_STR_NM","name"})
    @DAOConverter(DB2Trimmer.class)
    @XStreamAlias("name")
    private String mName;
    
    /** store address line 1 */
    @XStreamAlias("addressLine1")
    @DAOElement({"ADDR_LINE1_TXT","addrLine1"})
    @DAOConverter(DB2Trimmer.class)
    private String mAddrLine1;
    
    /** store address line 2*/
    @DAOElement({"ADDR_LINE2_TXT","addrLine2"})
    @DAOConverter(DB2Trimmer.class)
    @XStreamAlias("addressLine2")
    private String mAddrLine2;
    
    /** store city */
    @DAOElement({"CITY_NM","city"})
    @DAOConverter(DB2Trimmer.class)
    @XStreamAlias("city")
    private String mCity;
    
    /** store state */
    @DAOElement({"ST_CD","state"})
    @DAOConverter(DB2Trimmer.class)
    @XStreamAlias("state")
    private String mState;
    
    /** store postal code */
    @DAOElement({"LONG_ZIP_CD","pstlCd"})
    @DAOConverter(DB2Trimmer.class)
    @XStreamAlias("postalCode")
    private String mPstlCd;
    
    /** store country code */
    @DAOElement({"CNTRY_CD","cntryCd"})
    @DAOConverter(DB2Trimmer.class)
    @XStreamAlias("countryCode")
    private String mCntryCd;
    
    /** store phone number */
    @DAOElement({"PHN_NBR","phnNbr"})
    @DAOConverter(DB2Trimmer.class)
    @XStreamAlias("phoneNumber")
    private String mPhnNbr;
    
    /** store district code */
    @DAOElement({"HR_SYS_RGN_CD","distCd"})
    @DAOConverter(DB2Trimmer.class)
    @XStreamAlias("districtCode")
    private String mDistCd;
    
    /** store region code */
    @DAOElement({"HR_SYS_OGRP_NM","rgnCd"})
    @DAOConverter(DB2Trimmer.class)
    @XStreamAlias("regionCode")
    private String mRgnCd;
    
    /** store division code */
    @DAOElement({"HR_SYS_DIV_NM","divCd"})
    @DAOConverter(DB2Trimmer.class)
    @XStreamAlias("divisionCode")
    private String mDivCd;
    
    /** Can Store be Deleted from Hiring Event */
    @XStreamAlias("storeDeleteAllowed")
    private boolean mStoreDeleteAllowed;        
    
    /** Hiring Event host store */
    @XStreamAlias("eventSiteFlg")
    private String mEventSiteFlg;
    
    /** hiring event id */
    @XStreamAlias("hireEventId")
    private int mHireEventId;
    
    /** Insert or Update Hiring Event Participating Store Data */
    @XStreamAlias("updateInsertRecord")
    private String mUpdateInsertRecord;    
    
    
    /**
     * @return the store number
     */
    public String getNumber()
    {
    	return mNumber;
    } // end function getNumber()
    
	/**
     * @param number the store number
     */
    public void setNumber(String number)
    {
    	mNumber = number;
    } // end function getNumber()
        
	/**
     * @return the store name
     */
    public String getName()
    {
    	return mName;
    } // end function getName()
    
	/**
     * @param name the store name
     */
    public void setName(String name)
    {
    	mName = name;
    } // end function getName()
    
	/**
     * @return the store address line 1
     */
    public String getAddrLine1()
    {
    	return mAddrLine1;
    } // end function getAddrLine1()
    
	/**
     * @param addrLine1 the store address line 1
     */
    
    public void setAddrLine1(String addrLine1)
    {
    	mAddrLine1 = addrLine1;
    } // end function setAddrLine1()
    
	/**
     * @return the store address line 2
     */
    public String getAddrLine2()
    {
    	return mAddrLine2;
    } // end function getAddrLine2()
    
	/**
     * @param addrLine2 the store address line 2
     */
    public void setAddrLine2(String addrLine2)
    {
    	mAddrLine2 = addrLine2;
    } // end function getAddrLine2()
    
	/**
     * @return the store city
     */
    public String getCity()
    {
    	return mCity;
    } // end function getCity()
    
	/**
     * @param city the store city
     */
    public void setCity(String city)
    {
    	mCity = city;
    } // end function getCity()
    
	/**
     * @return the store state
     */
    public String getState()
    {
    	return mState;
    } // end function getState()
    
	/**
     * @param state the store state
     */
    public void setState(String state)
    {
    	mState = state;
    } // end function setState()
    
	/**
     * @return the store postal code
     */
    public String getPstlCd()
    {
    	return mPstlCd;
    } // end function getPstlCd()
    
	/**
     * @param pstlCd the store postal code
     */
    public void setPstlCd(String pstlCd)
    {
    	mPstlCd = pstlCd;
    } // end function setPstlCd()
    
	/**
     * @return the store country code
     */
    public String getCntryCd()
    {
    	return mCntryCd;
    } // end function setCntryCd()
    
	/**
     * @param cntryCd the store country code
     */
    public void setCntryCd(String cntryCd)
    {
    	mCntryCd = cntryCd;
    } // end function setCntryCd()
    
	/**
     * @return the store phone number
     */
    public String getPhnNbr()
    {
    	return mPhnNbr;
    } // end function setPhnNbr()
    
	/**
     * @param phnNbr the store phone number
     */
    public void setPhnNbr(String phnNbr)
    {
    	mPhnNbr = phnNbr;
    } // end function setPhnNbr()
    
	/**
     * @return the store district code
     */
    public String getDistCd()
    {
    	return mDistCd;
    } // end function setDistCd()
    
	/**
     * @param distCd the store district code
     */
    public void setDistCd(String distCd)
    {
    	mDistCd = distCd;
    } // end function setDistCd()
    
	/**
     * @return the store region code
     */
    public String getRgnCd()
    {
    	return mRgnCd;
    } // end function getRgnCd()
    
	/**
     * @param rgnCd the store region code
     */
    public void setRgnCd(String rgnCd)
    {
    	mRgnCd = rgnCd;
    } // end function setRgnCd()
    
	/**
     * @return the store division code
     */
    public String getDivCd()
    {
    	return mDivCd;
    } // end function getDivCd()
    
	/**
     * @param divCd the store division code
     */
    public void setDivCd(String divCd)
    {
    	mDivCd = divCd;
    } // end function setDivCd()
    
	/**
     * @return the storeDeleteAllowed true or false
     */
    public boolean getStoreDeleteAllowed()
    {
    	return mStoreDeleteAllowed;
    } // end function getStoreDeleteAllowed()
    
	/**
     * @param true or false StoreDeleteAllowed
     */
    public void setStoreDeleteAllowed(Boolean storeDeleteAllowed)
    {
    	mStoreDeleteAllowed = storeDeleteAllowed;
    } // end function setStoreDeleteAllowed()    
	/**
     * @return the eventSiteFlg Y or N
     */
    public String getEventSiteFlg()
    {
    	return mEventSiteFlg;
    } // end function getEventSiteFlg()
    
	/**
     * @param Y or N eventSiteFlg
     */
    public void setEventSiteFlg(String eventSiteFlg)
    {
    	mEventSiteFlg = eventSiteFlg;
    } // end function setEventSiteFlg()        
   
	/**
     * @return the hiring event id
     */
    public int getHireEventId()
    {
    	return mHireEventId;
    } // end function getHireEventId()
    
	/**
     * @param hiring event id
     */
    public void setHireEventId(int hireEventId)
    {
    	mHireEventId = hireEventId;
    } // end function setHireEventId()    
    
	/**
     * @return insert or update hiring event participating store data
     */
    public String getUpdateInsertRecord()
    {
    	return mUpdateInsertRecord;
    } // end function getUpdateInsertRecord()
    
	/**
     * @param insert or update hiring event participating store data
     */
    public void setUpdateInsertRecord(String updateInsertRecord)
    {
    	mUpdateInsertRecord = updateInsertRecord;
    } // end function setUpdateInsertRecord() 
    
} // end class Store